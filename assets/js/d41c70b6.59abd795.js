"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4303],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(r),k=a,f=m["".concat(l,".").concat(k)]||m[k]||u[k]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=k;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},4014:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const i={},o="PreRunModifier",s={unversionedId:"extending_robot_framework/listeners_prerun_api/prerunmodifier",id:"extending_robot_framework/listeners_prerun_api/prerunmodifier",title:"PreRunModifier",description:"A PreRunModifier can modify the test suite before it is executed.",source:"@site/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier.md",sourceDirName:"extending_robot_framework/listeners_prerun_api",slug:"/extending_robot_framework/listeners_prerun_api/prerunmodifier",permalink:"/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier",draft:!1,editUrl:"https://github.com/MarketSquare/robotframeworkguides/edit/main/website/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Listener Interface",permalink:"/docs/extending_robot_framework/listeners_prerun_api/listeners"},next:{title:"Robot Framework API",permalink:"/docs/extending_robot_framework/listeners_prerun_api/rf-api"}},l={},d=[{value:"Visitor",id:"visitor",level:2},{value:"Robot Model",id:"robot-model",level:2},{value:"Test Suite",id:"test-suite",level:3},{value:"Read Test Names from Test Suite",id:"read-test-names-from-test-suite",level:4},{value:"Example",id:"example",level:2},{value:"Select every Xth test",id:"select-every-xth-test",level:3},{value:"Copy and Modify Tests",id:"copy-and-modify-tests",level:3}],p={toc:d};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"prerunmodifier"},"PreRunModifier"),(0,a.kt)("p",null,"A PreRunModifier can modify the test suite before it is executed.",(0,a.kt)("br",{parentName:"p"}),"\n",'It is like a "dry run" of the test suite with the possibility to modify the test suite before the actual execution.',(0,a.kt)("br",{parentName:"p"}),"\n","It can be enabled by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--prerunmodifier")," option when running the test suite.  "),(0,a.kt)("p",null,"Things you can do with a PreRunModifier:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Skip or filter tests"),(0,a.kt)("li",{parentName:"ul"},"Read or modify test data (e.g. variables, tags, ...)"),(0,a.kt)("li",{parentName:"ul"},"Read or modify tests"),(0,a.kt)("li",{parentName:"ul"},"Read or modify keywords"),(0,a.kt)("li",{parentName:"ul"},"...")),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",{parentName:"p",href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#programmatic-modification-of-test-data"},"Robot Framework User Guide")," for more information.  "),(0,a.kt)("h2",{id:"visitor"},"Visitor"),(0,a.kt)("p",null,"Pre-run modifiers should be implemented as ",(0,a.kt)("strong",{parentName:"p"},"visitors")," that can traverse through the executable test suite structure and modify it as needed. The visitor interface is explained as part of the ",(0,a.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.visitor"},"Robot Framework API documentation"),", and it possible to modify executed test suites, test cases and keywords using it"),(0,a.kt)("p",null,"The visitor interface can execute code on the following events:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visit_suite")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_suite")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"end_suite")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visit_test")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_test")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"end_test")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visit_keyword")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_keyword")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"end_keyword"))),(0,a.kt)("p",null,"This is only a subset of the events that are available, but it is the most common ones.",(0,a.kt)("br",{parentName:"p"}),"\n","Check out the ",(0,a.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.visitor"},"Robot Framework API documentation")," for more information."),(0,a.kt)("h2",{id:"robot-model"},"Robot Model"),(0,a.kt)("p",null,"The Robot Framework API provides different objects that represent Robot Framework data.",(0,a.kt)("br",{parentName:"p"}),"\n","Depending on the event, the visitor will receive a different object.",(0,a.kt)("br",{parentName:"p"}),"\n","The following table shows the different objects that are available for each event."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Event"),(0,a.kt)("th",{parentName:"tr",align:null},"Object"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"visit_suite"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"start_suite"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"end_suite")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.testsuite"},"Testsuite"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"visit_test"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"start_test"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"end_test")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.testcase"},"Testcase"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"visit_keyword"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"start_keyword"),"/",(0,a.kt)("inlineCode",{parentName:"td"},"end_keyword")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.keyword"},"Keyword"))))),(0,a.kt)("p",null,"Again, this is only a subset of the objects that are available, but it is the most common ones."),(0,a.kt)("h3",{id:"test-suite"},"Test Suite"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.testsuite"},"Testsuite")," object represents a test suite."),(0,a.kt)("p",null,"The following properties are available:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")),(0,a.kt)("td",{parentName:"tr",align:null},"Unique ID of the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"name")),(0,a.kt)("td",{parentName:"tr",align:null},"Name of the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"source")),(0,a.kt)("td",{parentName:"tr",align:null},"Path to the test suite file")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"doc")),(0,a.kt)("td",{parentName:"tr",align:null},"Documentation of the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"metadata")),(0,a.kt)("td",{parentName:"tr",align:null},"Metadata of the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"tests")),(0,a.kt)("td",{parentName:"tr",align:null},"List of tests in the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"suites")),(0,a.kt)("td",{parentName:"tr",align:null},"List of child test suites")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"setup")),(0,a.kt)("td",{parentName:"tr",align:null},"Setup of the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"teardown")),(0,a.kt)("td",{parentName:"tr",align:null},"Teardown of the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"test_count")),(0,a.kt)("td",{parentName:"tr",align:null},"Number of tests in the test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"parent")),(0,a.kt)("td",{parentName:"tr",align:null},"Parent test suite")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"keywords")),(0,a.kt)("td",{parentName:"tr",align:null},"List of keywords in the test suite")))),(0,a.kt)("p",null,"As the test suite is a container for ",(0,a.kt)("inlineCode",{parentName:"p"},"tests"),"  and other test ",(0,a.kt)("inlineCode",{parentName:"p"},"suites"),", it is possible to access and modify the tests and suites objects from a top level test suite directly."),(0,a.kt)("h4",{id:"read-test-names-from-test-suite"},"Read Test Names from Test Suite"),(0,a.kt)("p",null,"The following example shows how to read the names of all tests in a test suite."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="ReadTestNames.py" showLineNumbers',title:'"ReadTestNames.py"',showLineNumbers:!0},'"""Pre-run modifier that reads the names of all tests in a test suite."""\n\nfrom robot.api import SuiteVisitor\n\ndef start_suite(self, suite):\n    """Read the names of all tests in the test suite."""\n    for test in suite.tests:\n        print(test.name)\n')),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"select-every-xth-test"},"Select every Xth test"),(0,a.kt)("p",null,"This example shows how to select every Xth test in a test suite.",(0,a.kt)("br",{parentName:"p"}),"\n","It could be used to distribute tests across multiple test runners, where each test runner only executes a subset of the tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="SelectEveryXthTest.py" showLineNumbers',title:'"SelectEveryXthTest.py"',showLineNumbers:!0},'"""Pre-run modifier that selects only every Xth test for execution.\n\nStarts from the first test by default. Tests are selected per suite.\n"""\n\nfrom robot.api import SuiteVisitor\n\n\nclass SelectEveryXthTest(SuiteVisitor):\n\n    def __init__(self, x: int, start: int = 0):\n        self.x = x\n        self.start = start\n\n    def start_suite(self, suite):\n        """Modify suite\'s tests to contain only every Xth."""\n        suite.tests = suite.tests[self.start::self.x]\n\n    def end_suite(self, suite):\n        """Remove suites that are empty after removing tests."""\n        suite.suites = [s for s in suite.suites if s.test_count > 0]\n\n    def visit_test(self, test):\n        """Avoid visiting tests and their keywords to save a little time."""\n        pass\n')),(0,a.kt)("p",null,"The command below will select every third test in the test suite, starting from the first test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"robot --prerunmodifier SelectEveryXthTest:3:0 tests\n")),(0,a.kt)("p",null,"To distribute the tests across three test runners, you would need to run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Test Runner 1\nrobot --prerunmodifier SelectEveryXthTest:3:0 tests\n# Test Runner 2\nrobot --prerunmodifier SelectEveryXthTest:3:1 tests\n# Test Runner 3\nrobot --prerunmodifier SelectEveryXthTest:3:2 tests\n")),(0,a.kt)("h3",{id:"copy-and-modify-tests"},"Copy and Modify Tests"),(0,a.kt)("p",null,"The following example shows how to copy and modify tests in a test suite."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="CopyTest.py" showLineNumbers',title:'"CopyTest.py"',showLineNumbers:!0},'from robot.api import SuiteVisitor\n\nclass CopyTest(SuiteVisitor):\n    def start_suite(self, suite):\n        """Copy and modify tests in the test suite."""\n        for test in suite.tests:\n            if "copy" not in test.tags:\n                test_case = suite.tests.append(test.deepcopy())\n                test_case.tags.add("copy")\n                test_case.name = f"{test_case.name} (copy)"\n')),(0,a.kt)("p",null,"6: Loop over all tests in the test suite",(0,a.kt)("br",{parentName:"p"}),"\n",'7: Check if the test does not have the tag "copy"',(0,a.kt)("br",{parentName:"p"}),"\n","8: Copy the test and add it to the end of the test suite",(0,a.kt)("br",{parentName:"p"}),"\n",'9: Add the tag "copy" to the copied test',(0,a.kt)("br",{parentName:"p"}),"\n","10: Modify the name of the copied test  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"robot --prerunmodifier CopyTest.py tests\n")))}m.isMDXComponent=!0}}]);