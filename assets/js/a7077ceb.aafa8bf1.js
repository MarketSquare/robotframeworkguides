"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7939],{7744:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=t(4848),i=t(8453);const o={sidebar_position:0,sidebar_label:"Create Non-Python Libraries",title:"Non-Python Libraries"},s=void 0,a={id:"extending_robot_framework/custom-libraries/non-python_library",title:"Non-Python Libraries",description:"Rust",source:"@site/docs/extending_robot_framework/custom-libraries/non-python_library.md",sourceDirName:"extending_robot_framework/custom-libraries",slug:"/extending_robot_framework/custom-libraries/non-python_library",permalink:"/docs/extending_robot_framework/custom-libraries/non-python_library",draft:!1,unlisted:!1,editUrl:"https://github.com/MarketSquare/robotframeworkguides/edit/main/website/docs/extending_robot_framework/custom-libraries/non-python_library.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Create Non-Python Libraries",title:"Non-Python Libraries"},sidebar:"tutorialSidebar",previous:{title:"\u26d4 TeamCity",permalink:"/docs/using_rf_in_ci_systems/ci/teamcity"},next:{title:"Create Python Libraries",permalink:"/docs/extending_robot_framework/custom-libraries/python_library"}},u={},l=[{value:"Rust",id:"rust",level:3}];function c(n){const e={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h3,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(e.p,{children:'Create a dynamic system library (crate_type = "cdylib") from the following source code.'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:'#![allow(non_snake_case)]\n\nuse std::collections::HashMap;\n\nuse pyo3::prelude::*;\n\n#[pyfunction]\nfn sum_as_string(a: i32, b: i32) -> PyResult<String> {\n    Ok((a + b).to_string())\n}\n\n#[pyfunction]\nfn join_strings(a: Vec<String>) -> PyResult<String> {\n    Ok(a.join(","))\n}\n\n#[pyfunction]\nfn sum_values(a: HashMap<String, i32>) -> PyResult<i32> {\n    let mut values_sum = 0;\n    for (_key, value) in &a {\n        values_sum += value;\n    }\n    Ok(values_sum)\n}\n\n#[pymodule]\nfn RustyLibrary(_py: Python, m: &PyModule) -> PyResult<()> {\n    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;\n    m.add_function(wrap_pyfunction!(join_strings, m)?)?;\n    m.add_function(wrap_pyfunction!(sum_values, m)?)?;\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"The library can then be used as follows."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-robotframework",children:"*** Settings ***\nLibrary    RustyLibrary\n\n*** Test Cases ***\nInteger Argument Conversion Test\n    ${x} =    Sum As String    ${5}    ${20}\n    Should Be Equal    ${x}    25\n\nList Argument Conversion Test\n    @{MY_LIST} =    Create List    spam    eggs\n\n    ${y} =    Join Strings    ${MY_LIST}\n    Should Be Equal    ${y}    spam,eggs\n\nDictionary Argument Conversion Test\n    &{MY_DICT} =    Create Dictionary    spam    ${11}    eggs    ${22}\n\n    ${z} =    Sum Values    ${MY_DICT}\n    Should Be Equal    ${z}    ${33}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["A complete working example that includes all build files (e.g. Cargo.toml) can be found on ",(0,r.jsx)(e.a,{href:"https://github.com/mneiferbag/robot-rust-test-library",children:"GitHub / mneiferbag / robot-python-test-library"}),"."]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);