"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3742],{1841:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>n,metadata:()=>d,toc:()=>c});var r=s(4848),i=s(8453);const n={},o="PreRunModifier",d={id:"extending_robot_framework/listeners_prerun_api/prerunmodifier",title:"PreRunModifier",description:"A PreRunModifier can modify the test suite before it is executed.",source:"@site/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier.md",sourceDirName:"extending_robot_framework/listeners_prerun_api",slug:"/extending_robot_framework/listeners_prerun_api/prerunmodifier",permalink:"/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier",draft:!1,unlisted:!1,editUrl:"https://github.com/MarketSquare/robotframeworkguides/edit/main/website/docs/extending_robot_framework/listeners_prerun_api/prerunmodifier.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Listener Interface",permalink:"/docs/extending_robot_framework/listeners_prerun_api/listeners"},next:{title:"Robot Framework API",permalink:"/docs/extending_robot_framework/listeners_prerun_api/rf-api"}},l={},c=[{value:"Visitor",id:"visitor",level:2},{value:"Robot Model",id:"robot-model",level:2},{value:"Test Suite",id:"test-suite",level:3},{value:"Read Test Names from Test Suite",id:"read-test-names-from-test-suite",level:4},{value:"Example",id:"example",level:2},{value:"Select every Xth test",id:"select-every-xth-test",level:3},{value:"Copy and Modify Tests",id:"copy-and-modify-tests",level:3}];function h(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"prerunmodifier",children:"PreRunModifier"}),"\n",(0,r.jsxs)(t.p,{children:["A PreRunModifier can modify the test suite before it is executed.",(0,r.jsx)(t.br,{}),"\n",'It is like a "dry run" of the test suite with the possibility to modify the test suite before the actual execution.',(0,r.jsx)(t.br,{}),"\n","It can be enabled by using the ",(0,r.jsx)(t.code,{children:"--prerunmodifier"})," option when running the test suite."]}),"\n",(0,r.jsx)(t.p,{children:"Things you can do with a PreRunModifier:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Skip or filter tests"}),"\n",(0,r.jsx)(t.li,{children:"Read or modify test data (e.g. variables, tags, ...)"}),"\n",(0,r.jsx)(t.li,{children:"Read or modify tests"}),"\n",(0,r.jsx)(t.li,{children:"Read or modify keywords"}),"\n",(0,r.jsx)(t.li,{children:"..."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Check out the ",(0,r.jsx)(t.a,{href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#programmatic-modification-of-test-data",children:"Robot Framework User Guide"})," for more information."]}),"\n",(0,r.jsx)(t.h2,{id:"visitor",children:"Visitor"}),"\n",(0,r.jsxs)(t.p,{children:["Pre-run modifiers should be implemented as ",(0,r.jsx)(t.strong,{children:"visitors"})," that can traverse through the executable test suite structure and modify it as needed. The visitor interface is explained as part of the ",(0,r.jsx)(t.a,{href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.visitor",children:"Robot Framework API documentation"}),", and it possible to modify executed test suites, test cases and keywords using it"]}),"\n",(0,r.jsx)(t.p,{children:"The visitor interface can execute code on the following events:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"visit_suite"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"start_suite"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"end_suite"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"visit_test"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"start_test"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"end_test"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"visit_keyword"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"start_keyword"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"end_keyword"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["This is only a subset of the events that are available, but it is the most common ones.",(0,r.jsx)(t.br,{}),"\n","Check out the ",(0,r.jsx)(t.a,{href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.visitor",children:"Robot Framework API documentation"})," for more information."]}),"\n",(0,r.jsx)(t.h2,{id:"robot-model",children:"Robot Model"}),"\n",(0,r.jsxs)(t.p,{children:["The Robot Framework API provides different objects that represent Robot Framework data.",(0,r.jsx)(t.br,{}),"\n","Depending on the event, the visitor will receive a different object.",(0,r.jsx)(t.br,{}),"\n","The following table shows the different objects that are available for each event."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Event"}),(0,r.jsx)(t.th,{children:"Object"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"visit_suite"}),"/",(0,r.jsx)(t.code,{children:"start_suite"}),"/",(0,r.jsx)(t.code,{children:"end_suite"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.testsuite",children:"Testsuite"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"visit_test"}),"/",(0,r.jsx)(t.code,{children:"start_test"}),"/",(0,r.jsx)(t.code,{children:"end_test"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.testcase",children:"Testcase"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"visit_keyword"}),"/",(0,r.jsx)(t.code,{children:"start_keyword"}),"/",(0,r.jsx)(t.code,{children:"end_keyword"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.keyword",children:"Keyword"})})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Again, this is only a subset of the objects that are available, but it is the most common ones."}),"\n",(0,r.jsx)(t.h3,{id:"test-suite",children:"Test Suite"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.a,{href:"https://robot-framework.readthedocs.io/en/master/autodoc/robot.model.html#module-robot.model.testsuite",children:"Testsuite"})," object represents a test suite."]}),"\n",(0,r.jsx)(t.p,{children:"The following properties are available:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Property"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"id"})}),(0,r.jsx)(t.td,{children:"Unique ID of the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"name"})}),(0,r.jsx)(t.td,{children:"Name of the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"source"})}),(0,r.jsx)(t.td,{children:"Path to the test suite file"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"doc"})}),(0,r.jsx)(t.td,{children:"Documentation of the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"metadata"})}),(0,r.jsx)(t.td,{children:"Metadata of the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"tests"})}),(0,r.jsx)(t.td,{children:"List of tests in the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"suites"})}),(0,r.jsx)(t.td,{children:"List of child test suites"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"setup"})}),(0,r.jsx)(t.td,{children:"Setup of the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"teardown"})}),(0,r.jsx)(t.td,{children:"Teardown of the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"test_count"})}),(0,r.jsx)(t.td,{children:"Number of tests in the test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"parent"})}),(0,r.jsx)(t.td,{children:"Parent test suite"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"keywords"})}),(0,r.jsx)(t.td,{children:"List of keywords in the test suite"})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["As the test suite is a container for ",(0,r.jsx)(t.code,{children:"tests"}),"  and other test ",(0,r.jsx)(t.code,{children:"suites"}),", it is possible to access and modify the tests and suites objects from a top level test suite directly."]}),"\n",(0,r.jsx)(t.h4,{id:"read-test-names-from-test-suite",children:"Read Test Names from Test Suite"}),"\n",(0,r.jsx)(t.p,{children:"The following example shows how to read the names of all tests in a test suite."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:'title="ReadTestNames.py" showLineNumbers',children:'"""Pre-run modifier that reads the names of all tests in a test suite."""\n\nfrom robot.api import SuiteVisitor\n\ndef start_suite(self, suite):\n    """Read the names of all tests in the test suite."""\n    for test in suite.tests:\n        print(test.name)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.h3,{id:"select-every-xth-test",children:"Select every Xth test"}),"\n",(0,r.jsxs)(t.p,{children:["This example shows how to select every Xth test in a test suite.",(0,r.jsx)(t.br,{}),"\n","It could be used to distribute tests across multiple test runners, where each test runner only executes a subset of the tests."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:'title="SelectEveryXthTest.py" showLineNumbers',children:'"""Pre-run modifier that selects only every Xth test for execution.\n\nStarts from the first test by default. Tests are selected per suite.\n"""\n\nfrom robot.api import SuiteVisitor\n\n\nclass SelectEveryXthTest(SuiteVisitor):\n\n    def __init__(self, x: int, start: int = 0):\n        self.x = x\n        self.start = start\n\n    def start_suite(self, suite):\n        """Modify suite\'s tests to contain only every Xth."""\n        suite.tests = suite.tests[self.start::self.x]\n\n    def end_suite(self, suite):\n        """Remove suites that are empty after removing tests."""\n        suite.suites = [s for s in suite.suites if s.test_count > 0]\n\n    def visit_test(self, test):\n        """Avoid visiting tests and their keywords to save a little time."""\n        pass\n'})}),"\n",(0,r.jsx)(t.p,{children:"The command below will select every third test in the test suite, starting from the first test."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"robot --prerunmodifier SelectEveryXthTest:3:0 tests\n"})}),"\n",(0,r.jsx)(t.p,{children:"To distribute the tests across three test runners, you would need to run"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Test Runner 1\nrobot --prerunmodifier SelectEveryXthTest:3:0 tests\n# Test Runner 2\nrobot --prerunmodifier SelectEveryXthTest:3:1 tests\n# Test Runner 3\nrobot --prerunmodifier SelectEveryXthTest:3:2 tests\n"})}),"\n",(0,r.jsx)(t.h3,{id:"copy-and-modify-tests",children:"Copy and Modify Tests"}),"\n",(0,r.jsx)(t.p,{children:"The following example shows how to copy and modify tests in a test suite."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:'title="CopyTest.py" showLineNumbers',children:'from robot.api import SuiteVisitor\n\nclass CopyTest(SuiteVisitor):\n    def start_suite(self, suite):\n        """Copy and modify tests in the test suite."""\n        for test in suite.tests:\n            if "copy" not in test.tags:\n                test_case = suite.tests.append(test.deepcopy())\n                test_case.tags.add("copy")\n                test_case.name = f"{test_case.name} (copy)"\n'})}),"\n",(0,r.jsxs)(t.p,{children:["6: Loop over all tests in the test suite",(0,r.jsx)(t.br,{}),"\n",'7: Check if the test does not have the tag "copy"',(0,r.jsx)(t.br,{}),"\n","8: Copy the test and add it to the end of the test suite",(0,r.jsx)(t.br,{}),"\n",'9: Add the tag "copy" to the copied test',(0,r.jsx)(t.br,{}),"\n","10: Modify the name of the copied test"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"robot --prerunmodifier CopyTest.py tests\n"})})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>d});var r=s(6540);const i={},n=r.createContext(i);function o(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);